name: Infra deploymment
on:
  push:
    branches:
      - dev
      - staging
      - prod

jobs:
  build-push-container-lambdas:
    if: github.ref == 'refs/heads/dev'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ca-central-1
      
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Create ECR repository if it doesn't exist
        run: |
          aws ecr describe-repositories --repository-names ${{ vars.INFERENCE_CHAT_ECR }} || \
          aws ecr create-repository --repository-name ${{ vars.INFERENCE_CHAT_ECR }} && \
          LIFECYCLE_POLICY=$(cat ./env/dev/setting/ecr_policy.json) && \
          aws ecr put-lifecycle-policy --repository-name ${{ vars.INFERENCE_CHAT_ECR }} --lifecycle-policy-text "$LIFECYCLE_POLICY"

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: latest
        run: |
          docker build -t $ECR_REGISTRY/${{ vars.INFERENCE_CHAT_ECR }}:$IMAGE_TAG ./modules/inference/chat/src
      
      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
      - name: Create Python alias
        run: |
          echo 'alias python3.11="/usr/bin/python3.11"' >> $GITHUB_ENV
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3


  deploy-api-infra:
    if: github.ref == 'refs/heads/dev'
    runs-on: ubuntu-latest
    needs: build-push-container-lambdas
    defaults:
      run:
        working-directory: ./env/dev
    steps:
    - name: Terraform fmt
      id: fmt
      run: terraform fmt -check
      continue-on-error: true

    - name: Terraform Init
      id: init
      run: terraform init -no-color -upgrade

    - name: Terraform Validate
      id: validate
      run: terraform validate -no-color
    
    - name: Terraform Apply
      id: apply
      shell: bash
      run: |
        terraform apply -var-file="dev.tfvars" -var="inference_chat_repository_name=${{ vars.INFERENCE_CHAT_ECR }}" -no-color -auto-approve